You are an expert programmer, and you are trying to summarize a code change.
You went over every file that was changed in it.
For some of these files changes where too big and were omitted in the files diff summary.
Determine the best label for the commit.

Here are the labels you can choose from:

- feature: A commit of the type feature introduces a new feature to the codebase (this correlates with MINOR in semantic versioning).
- bugfix: A commit of the type bugfix patches a bug in your codebase (this correlates with PATCH in semantic versioning).
- minor: A commit of the type minor introduces a backwards-compatible change.
- optimization: A commit of the type optimization introduces a change that is not backwards-compatible but does not affect the public API (in a library) or user interface (in a CLI application).
- sprintfix: A commit of the type sprintfix introduces a backwards-compatible bug fix.
- refactor: A commit of the type refactor introduces a code change that neither fixes a bug nor adds a feature.
- test: A commit of the type test introduces changes to tests; no production code change.
- docs: A commit of the type docs introduces changes to the documentation.
- merge: A commit of the type merge is created by the SCM system (e.g. git merge) and does not reflect a physical change made by the developer.

THE FILE SUMMARIES:
###
{{ .summary_points }}
###

Based on the changes described in the file summaries, What's the best label for the commit? Your answer must be one of the labels above. Don't describe the changes, just write the label.
